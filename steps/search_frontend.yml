id: search_frontend
learningObjectives: 
- Adding a UI component 
hints:
- You should probably try adding an [input element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input) for searching.
- It should be pretty similar to how we apply the tag filter (APPLY_TAG_FILTER) when the user chooses a tag.
startFlow:
  do:
  - actionId: bot_message
    params:
      person: head-of-rd
      messages:
      - text: Ok, so now that we have an API that can filter results, it’s time to add it to the UI!
        delay: 1200
      - text: ":instruction[**Add a search box to the main page, with the id `search-box`.**]"
        delay: 3000
      - text: "Here’s what it should look like (you can ignore the magnifying glass icon for now):"
        delay: 2100
      - text: https://res.cloudinary.com/ness90210/image/upload/v1658051139/Anythink_search/UI/Screen-Shot-SearchUI.png
        delay: 1800
      - text: ":instruction[**When creating the UI component, make sure it can:**]"
        delay: 3300
      - text: "**- Search for matches in item titles after at least 3 characters are typed, with a new search for every new character added or subtracted.**"
        delay: 2400
      - text: "**- Use the search mechanism to filter the items presented on the homepage.**"
        delay: 2500
      - text: When you’re done, :instruction[open a PR with the frontend code changes] and I’ll review it as soon as possible. 
        delay: 3900

trigger:
  type: github_pr_lifecycle_status
  flowNode:
    switch:
      key: ${eventType}
      cases:
        github_pr_opened:
          do:      
          - actionId: github_pr_comment
            params:
              person: head-of-rd
              message: That was fast! Let’s see...

          - actionId: bot_message
            params:
              person: head-of-rd
              messages:
              - text: That was fast! Let’s see...
                delay: 300
        github_pr_workflow_complete_success:
          do:
          - actionId: github_pr_approve
            params:
              person: head-of-rd
              message: Yay, it works! Go ahead and merge the PR.

          - actionId: bot_message
            params:
              person: head-of-rd
              messages:
              - text: Yay, it works! Go ahead and merge the PR.
                delay: 1000
        github_pr_workflow_complete_failure:
          do:
          - actionId: github_pr_reject
            params:
              person: head-of-rd
              message: Bummer, it looks like the frontend doesn't work. Let’s give it another try and **make sure all [checks](${githubWorkflowRunUrl}) pass**.

          - actionId: bot_message
            params:
              person: head-of-rd
              messages:
              - text: Bummer, it looks like the frontend doesn't work. Let’s give it another try and **make sure all [checks](${githubWorkflowRunUrl}) pass**.
                delay: 1000
        github_pr_merged:
          do:
          - actionId: finish_step
githubActions:
  frontend:
    capabilities: []
    testFile: "search-box.test.js"
solution:
  do:
    - actionId: bot_message
      params:
        messages:
          - text: According to the requirement, the right place to add the `Input` element is the Banner "frontend/src/components/Home/Banner.js".
          - text: The Banner should now get a parameter, that will be used in the Input element for the search term itself (as `value`) and the function that will be used in the `onChange` event for updating the search term.
          - text: The `onChange` event, is also the place to make sure that the filter will be applied only after the user entered 3 or more characters in the search box.
          - text: After that, it will be a good idea to add a new actionType `APPLY_SEARCH_FILTER` and a `search` attribute to the state - try looking into how APPLY_TAG_FILTER and the state are managed in "frontend/src/reducers/itemList.js", and where APPLY_TAG_FILTER is used around the app.
          - text: The file "frontend/src/components/Home/index.js" is the place where the Banner is called, so it will be a good idea to pass it the new parameters it needs, and also don't forget to take a look at how `mapDispatchToProps` is defined.
          - text: Lastly, in order to make the API calls that you worked on in the previous step, you will need to make some changes in "frontend/src/agent.js" so that the `title` is passed in the url params.